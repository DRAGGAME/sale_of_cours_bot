version: "3.9"

services:
  db:
    image: postgres:18
    container_name: postgres_sale_of_cours
    hostname: postgres_sale_of_cours
    environment:
      POSTGRES_USER: ${user}
      POSTGRES_PASSWORD: ${password}
      POSTGRES_DB: ${DATABASE}
      PGDATA: /var/lib/postgresql/pgdata
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/pgdata
    command: >
      postgres
      -c max_connections=10000
      -c shared_buffers=256MB
      -c effective_cache_size=768MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${user} -d ${DATABASE}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - sale_of_cours_bot_postgres_network

  redis:
    image: redis:6.2.6-alpine
    container_name: redis
    hostname: redis
    ports:
      - "0.0.0.0:6379:6379"
    volumes:
      - redis-data:/data
    environment:
      REDIS_PASSWORD: ${PASSWORD_REDIS}
      REDIS_DATABASES: ${REDIS_DATABASES}
      REDIS_MAXMEMORY: 1.5GB
      REDIS_APPENDONLY: "yes"

    networks:
      - sale_of_cours_bot_postgres_network

  tg_sale_of_course:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tg_sale_of_course
    environment:

      - HOST_POSTGRES=postgres_sale_of_cours
      - PORT_POSTGRES=5432
      - USER_POSTGRES=${USER_POSTGRES}
      - PASSWORD_POSTGRES=${PASSWORD_POSTGRES}
      - DATABASE_POSTGRES=${DATABASE_POSTGRES}

      - HOST_REDIS=redis
      - PASSWORD_REDIS=${PASSWORD_REDIS}
      - REDIS_DATABASES=${REDIS_DATABASES}

      - TG_API=${TG_API}
      - PROVIDER_TOKEN=${PROVIDER_TOKEN}

    depends_on:
      - db
      - redis
    networks:
      - sale_of_cours_bot_postgres_network

volumes:
  pgdata:
    driver: local
  redis-data:
    driver: local

networks:
  sale_of_cours_bot_postgres_network:
    driver: bridge
